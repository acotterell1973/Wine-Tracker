{"Name":"JSQMessagesViewController","Id":2220,"Alias":"jsqmessagesviewcontroller","Description":"Messaging within mobile applications is a popular feature expected by users in all types of apps.  JSQMessagesViewController provides a gorgeous and feature rich iOS view controller that makes adding messaging to your app easy.\n\nThe feature list for JSQMessagesViewController includes...\n\n - Media messages\n - Easily extensible\n - Customizable avatars\n - Customizable chat bubbles\n - Customizable cell labels\n - Group chat\n - Timestamp formatting\n - Copy \u0026 paste messages\n - UIDynamics for springy bubbles\n - Smooth animations\n \nFor more information on the native library please visit JSQMessagesViewController\u0027s [website][1] or [GitHub repository.][2]\n \n [1]: http://www.jessesquires.com/JSQMessagesViewController/\n [2]: https://github.com/jessesquires/JSQMessagesViewController","Version":"7.2.0","Summary":"An elegant messages UI library for iOS","QuickStart":"To get started with a simple message view displaying only text you need to create a class that is a subclass of `MessagesViewController`, override 4 methods and set the `SenderId` and `SenderDisplayName` properties.\n\nIn the ViewDidLoad method the `SenderId` and `SenderDisplayName` properties should be set to determine which messages are incoming or outgoing.  Also create MessagesBubbleImages to be used in GetMessageBubbleImageData.  Finally in our example we will not display avatars therefore the `AvatarViewSize` properties are set to `Empty`.\n\n``` csharp\npublic override void ViewDidLoad ()\n{\n\tbase.ViewDidLoad ();\n\n\t// You must set your senderId and display name\n\tSenderId = sender.Id;\n\tSenderDisplayName = sender.DisplayName;\n\n\t// These MessagesBubbleImages will be used in the GetMessageBubbleImageData override\n\tvar bubbleFactory = new MessagesBubbleImageFactory ();\n\toutgoingBubbleImageData = bubbleFactory.CreateOutgoingMessagesBubbleImage (UIColorExtensions.MessageBubbleLightGrayColor);\n\tincomingBubbleImageData = bubbleFactory.CreateIncomingMessagesBubbleImage (UIColorExtensions.MessageBubbleBlueColor);\n\n\t// Remove the Avatars\n\tCollectionView.CollectionViewLayout.IncomingAvatarViewSize = CoreGraphics.CGSize.Empty;\n\tCollectionView.CollectionViewLayout.OutgoingAvatarViewSize = CoreGraphics.CGSize.Empty;\n}\n\n```\n\nTo specify the number of total cells to display override IUICollectionViewDataSource.GetItemsCount`.\n\n``` csharp\npublic override nint GetItemsCount (UICollectionView collectionView, nint section)\n{\n\treturn 2;\n}\n```\n\nTo populate the view with messages, the message data that corresponds to the specified item at indexPath must be returned from `IMessagesCollectionViewDataSource.GetMessageData`.\n\n``` csharp\npublic override IMessageData GetMessageData (MessagesCollectionView collectionView, NSIndexPath indexPath)\n{\n\tif (indexPath.Row == 0)\n\t\treturn Message.Create (\"123\", \"Me\", \"Ping\");\n\n\treturn Message.Create (\"456\", \"You\", \"Pong\");\n}\n```\n\nThe `IMessagesCollectionViewDataSource.GetMessageBubbleImageData` method asks the data source for the message bubble image data that corresponds to the specified message data item at indexPath in the view.\n\n``` csharp\npublic override IMessageBubbleImageDataSource GetMessageBubbleImageData (MessagesCollectionView collectionView, NSIndexPath indexPath)\n{\n\tif (indexPath.Row == 0)\n\t\treturn outgoingBubbleImageData;\n\t\n\treturn incomingBubbleImageData;\n}\n```\n\nAlthough the example does not display avatars, it is required to implement `IMessagesCollectionViewDataSource.GetAvatarImageData`.  Simply return null.\n\n``` csharp\npublic override IMessageAvatarImageDataSource GetAvatarImageData (MessagesCollectionView collectionView, NSIndexPath indexPath)\n{\n\treturn null;\n}\n```\n\nAt this point the sample will run displaying the two messages, however the text for the sender is white on a light background.  To change text color override `IUICollectionViewDataSource.GetCell` and call the base class to get the MessagesCollectionViewCell.  Then change the `TextView.TextColor` to Black.\n\n``` csharp\npublic override UICollectionViewCell GetCell (UICollectionView collectionView, NSIndexPath indexPath) \n{\n\tvar cell =  base.GetCell (collectionView, indexPath) as MessagesCollectionViewCell;\n\n\t// Override GetCell to make modifications to the cell\n\t// In this case darken the text for the sender\n\tif (indexPath.Row == 0)\n\t\tcell.TextView.TextColor = UIColor.Black;\n\n\treturn cell;\n}\n```\n\nFor more information on the native library please visit JSQMessagesViewController\u0027s [website][1] or [GitHub repository.][2]\n \n [1]: http://www.jessesquires.com/JSQMessagesViewController/\n [2]: https://github.com/jessesquires/JSQMessagesViewController\n","Hash":"863157ff82d054c8e6604638b1bd8d45","TargetPlatforms":["ios","ios-unified"],"TrialHash":null}